function PriorityQueue() {
  let items = [];

  //Container
  function QueueElement(element) {
    this.element = element;
    this.priority = getRandomInt(1, 100); //priority is generated by random
  }
  //Add a new element in queue
  this.enqueue = function (element) {
    let queueElement = new QueueElement(element);

    //To check if element is added
    let added = false;
    for (let i = 0; i < items.length; i++) {
      //We are using giving priority to higher numbers
      //If new element has more priority then add it at that place
      if (queueElement.priority > items[i].priority) {
        items.splice(i, 0, queueElement);

        //Mark the flag true
        added = true;
        break;
      }
    }

    //If element is not added
    //Then add it to the end of the queue
    if (!added) {
      items.push(queueElement);
    }
  };

  //Remove element from the queue
  this.dequeue = () => {
    return items.shift();
  };

  //Return the last element from the queue
  this.rear = () => {
    return items[items.length - 1];
  };

  this.jobRunner = function () {
    // you can define you own job, I decided to multiply every element from queue by 2
    let newArr = items.map((item) => item.element * 2);
    console.log('JOB RUNNER. Numbers sorted by priority, multiplied by 2:');
    console.log(...newArr);
  };

  this.print = function () {
    console.log('Elements with their values, sorted by priority:');
    for (let i = 0; i < items.length; i++) {
      console.log(`${items[i].element} - ${items[i].priority}`);
    }
  };
}

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min;
}

function getArrayOfTasks() {
  for (let i = 0; i < 10001; i++) {
    pQ.enqueue(getRandomInt(1, 100)); //value is generated by random
  }
}



let pQ = new PriorityQueue();

// uncomment below to test

// getArrayOfTasks();
// pQ.jobRunner();
// pQ.print();
